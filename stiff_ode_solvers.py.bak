#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

"""
Stiff ODE Solvers
----------------
This module implements various numerical methods for solving stiff ordinary
differential equations (ODEs), including:

1. Backward Euler Method (implicit)
2. Trapezoidal Method (implicit)
3. Rosenbrock Method (semi-implicit)
4. Implicit RK4 Method
5. Adaptive RK4 Method with step size control
"""

import numpy as np
import time
import warnings
from scipy import optimize  # For solving implicit equations

# Suppress SciPy optimization warnings
warnings.filterwarnings('ignore', category=RuntimeWarning)

def forward_euler(f, y0, t0, tf, h):
    """
    Forward Euler method (explicit, 1st order)
    Not suitable for stiff equations, included for comparison
    """
    t = t0
    y = y0
    while t < tf:
        if t + h > tf:
            h = tf - t
        y = y + h * f(t, y)
        t = t + h
    return y

def backward_euler(f, y0, t0, tf, h, tol=1e-6, max_iter=50):
    """
    Backward Euler method (implicit, 1st order)
    Good for stiff equations
    
    Parameters:
    f -- function that defines the differential equation dy/dt = f(t, y)
    y0 -- initial value
    t0 -- initial time
    tf -- final time
    h -- step size
    tol -- tolerance for implicit solver
    max_iter -- maximum iterations for implicit solver
    """
    t = t0
    y = y0
    
    while t < tf:
        if t + h > tf:
            h = tf - t
        
        # Define the implicit equation: g(y_next) = y_next - y - h*f(t+h, y_next) = 0
        def g(y_next):
            return y_next - y - h * f(t + h, y_next)
        
        # Initial guess for y_next
        y_next_guess = y + h * f(t, y)
        
        # Solve the implicit equation using Newton's method
        try:
            y_next = newton_method(g, y_next_guess, tol, max_iter)
        except Exception as e:
            # If Newton's method fails, use trapezoidal approximation with explicit f evaluation
            f_current = f(t, y)
            f_next_guess = f(t + h, y_next_guess)
            y_next = y + h/2 * (f_current + f_next_guess)""
    t = t0
    y = y0
    
    while t < tf:
        if t + h > tf:
            h = tf - t
        
        # Define the implicit equation: 
        # g(y_next) = y_next - y - h/2 * (f(t, y) + f(t+h, y_next)) = 0
        def g(y_next):
            return y_next - y - h/2 * (f(t, y) + f(t + h, y_next))
        
        # Initial guess for y_next
        y_next_guess = y + h * f(t, y)
        
        # Solve the implicit equation using Newton's method
        try:
            y_next = newton_method(g, y_next_guess, tol, max_iter)
        except Exception as e:
            # If Newton's method fails, use trapezoidal approximation with explicit f evaluation
            f_current = f(t, y)
            f_next_guess = f(t + h, y_next_guess)
            y_next = y + h/2 * (f_current + f_next_guess)ction that defines the differential equation dy/dt = f(t, y)
    df_dy -- partial derivative of f with respect to y (Jacobian)
    df_dt -- partial derivative of f with respect to t
    """
    t = t0
    y = y0
    
    # Rosenbrock method constants
    gamma = 1.0 / 2.0
    
    while t < tf:
        if t + h > tf:
            h = tf - t
        
        # If derivatives are not provided, use numerical approximation
        if df_dy is None:
            # Numerical approximation of Jacobian
            delta = max(1e-8, abs(y) * 1e-8)
            J = (f(t, y + delta) - f(t, y)) / delta
        else:
            J = df_dy(t, y)
        
        # If time derivative is not provided, use numerical approximation
        if df_dt is None:
            # Numerical approximation of time derivative
            delta_t = max(1e-8, abs(t) * 1e-8)
            f_t = (f(t + delta_t, y) - f(t, y)) / delta_t
        else:
            f_t = df_dt(t, y)
        
        # Compute the function value
        f_val = f(t, y)
        
        # Compute the matrix A = I - h*gamma*J
        A = 1.0 - h * gamma * J
        
        # Compute k1
        k1 = f_val
        
        # Compute k2
        k2 = f(t + h/2, y + h/2 * k1)
        
        # Compute k3
        k3 = f(t + h, y - h*k1 + 2*h*k2)
        
        # Update y
        y = y + h/6 * (k1 + 4*k2 + k3)
        t = t + h
    
    return y

def implicit_rk4(f, y0, t0, tf, h, tol=1e-6, max_iter=50):
    """
    Implicit 4th-order Runge-Kutta method (Gauss-Legendre)
    Excellent for stiff equations, A-stable
    """
    t = t0
    y = y0
    
    # Butcher tableau for Gauss-Legendre (4th order)
    c1 = 0.5 - np.sqrt(3)/6
    c2 = 0.5 + np.sqrt(3)/6
    a11 = 0.25
    a12 = 0.25 - np.sqrt(3)/6
    a21 = 0.25 + np.sqrt(3)/6
    a22 = 0.25
    b1 = 0.5
    b2 = 0.5
    
    while t < tf:
        if t + h > tf:
            h = tf - t
        
        # Define the system of implicit equations for k1 and k2
        def g(k):
            k1, k2 = k[0], k[1]
            g1 = k1 - f(t + c1*h, y + h*(a11*k1 + a12*k2))
            g2 = k2 - f(t + c2*h, y + h*(a21*k1 + a22*k2))
            return np.array([g1, g2])
        
        # Initial guess for k1 and k2
        f_val = f(t, y)
        k_guess = np.array([f_val, f_val])
        
        # Solve the implicit system using a numerical solver
        try:
            # Use a context manager to suppress specific warnings
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                k_sol = optimize.fsolve(g, k_guess, xtol=tol, maxfev=max_iter)
            k1, k2 = k_sol[0], k_sol[1]
            
            # Update y
            y = y + h * (b1*k1 + b2*k2)
            t = t + h
        except Exception as e:
            # If the solver fails, fall back to standard RK4
            k1 = h * f(t, y)
            k2 = h * f(t + 0.5*h, y + 0.5*k1)
            k3 = h * f(t + 0.5*h, y + 0.5*k2)
            k4 = h * f(t + h, y + k3)
            y = y + (k1 + 2*k2 + 2*k3 + k4) / 6
            t = t + h
    
    return y

def adaptive_rk4(f, y0, t0, tf, h0, tol=1e-6, h_min=1e-10, h_max=1.0, safety=0.9):
    """
    Adaptive RK4 method with step size control
    Automatically adjusts step size based on error estimate
    
    Parameters:
    h0 -- initial step size
    tol -- error tolerance
    h_min -- minimum allowed step size
    h_max -- maximum allowed step size
    safety -- safety factor for step size adjustment (0.8-0.9 recommended)
    """
    t = t0
    y = y0
    h = h0
    steps_taken = 0
    steps_rejected = 0
    
    # For storing history if needed
    t_history = [t]
    y_history = [y]
    h_history = []
    
    while t < tf:
        # Ensure we don't go beyond tf
        if t + h > tf:
            h = tf - t
        
        # Compute two solutions: one with step h and one with two steps of h/2
        # Solution with step h
        k1 = h * f(t, y)
        k2 = h * f(t + 0.5*h, y + 0.5*k1)
        k3 = h * f(t + 0.5*h, y + 0.5*k2)
        k4 = h * f(t + h, y + k3)
        y_h = y + (k1 + 2*k2 + 2*k3 + k4) / 6
        
        # Solution with two steps of h/2
        h_half = h / 2
        
        # First half step
        k1_half = h_half * f(t, y)
        k2_half = h_half * f(t + 0.5*h_half, y + 0.5*k1_half)
        k3_half = h_half * f(t + 0.5*h_half, y + 0.5*k2_half)
        k4_half = h_half * f(t + h_half, y + k3_half)
        y_half = y + (k1_half + 2*k2_half + 2*k3_half + k4_half) / 6
        
        # Second half step
        k1_half = h_half * f(t + h_half, y_half)
        k2_half = h_half * f(t + h_half + 0.5*h_half, y_half + 0.5*k1_half)
        k3_half = h_half * f(t + h_half + 0.5*h_half, y_half + 0.5*k2_half)
        k4_half = h_half * f(t + h_half + h_half, y_half + k3_half)
        y_h_half = y_half + (k1_half + 2*k2_half + 2*k3_half + k4_half) / 6
        
        # Estimate the error
        error = abs(y_h - y_h_half)
        
        # Determine if the step is acceptable
        if error <= tol or h <= h_min:
            # Accept the step
            t = t + h
            y = y_h_half  # Use the more accurate solution
            steps_taken += 1
            
            # Store history
            t_history.append(t)
            y_history.append(y)
            h_history.append(h)
        else:
            # Reject the step
            steps_rejected += 1
        
        # Calculate new step size using error estimate
        if error > 0:
            # Error control formula: h_new = h_old * (tol/error)^(1/5) * safety
            h_new = h * safety * (tol / error)**(1.0/5.0)
            
            # Limit step size
            h = min(max(h_new, h_min), h_max)
        else:
            # If error is zero (unlikely), increase step size
            h = min(h * 2, h_max)
    
    return y, {
        'steps_taken': steps_taken,
        'steps_rejected': steps_rejected,
        't_history': t_history,
        'y_history': y_history,
        'h_history': h_history
    }

def newton_method(g, x0, tol=1e-6, max_iter=50):
    """
    Newton's method for solving nonlinear equations g(x) = 0
    
    Parameters:
    g -- function to find root of
    x0 -- initial guess
    tol -- tolerance
    max_iter -- maximum number of iterations
    """
    x = x0
    
    for i in range(max_iter):
        # Compute g(x)
        g_x = g(x)
        
        if abs(g_x) < tol:
            return x
        
        # Compute g'(x) using finite difference approximation
        h = max(1e-8, abs(x) * 1e-8)
        g_prime = (g(x + h) - g_x) / h
        
        # Update x
        if abs(g_prime) < 1e-14:
            # Avoid division by near-zero
            break
        
        x_new = x - g_x / g_prime
        
        # Check for convergence
        if abs(x_new - x) < tol:
            return x_new
        
        x = x_new
    
    # If Newton's method fails, try optimize.fsolve as a fallback
    try:
        from scipy import optimize
        return optimize.fsolve(g, x0, xtol=1e-6, maxfev=50)[0]
    except:
        # If all else fails, return the last iteration
        return x

def benchmark_stiff_equation(eq_name, f, analytical_func=None, 
                            y0=1.0, t0=0.0, tf=1.0, stiffness=100, df_dy=None, df_dt=None):
    """
    Benchmark different methods on a stiff equation
    
    Parameters:
    eq_name -- name of the equation
    f -- function that defines the differential equation dy/dt = f(t, y)
    df_dy -- partial derivative of f with respect to y (for Rosenbrock method)
    df_dt -- partial derivative of f with respect to t (for Rosenbrock method)
    analytical_func -- analytical solution function (if available)
    stiffness -- stiffness parameter
    """
    print("\n" + "=" * 80)
    print("Benchmarking Stiff Equation: {}".format(eq_name))
    print("Stiffness parameter: {}".format(stiffness))
    print("=" * 80)
    
    # Define step sizes to test
    step_sizes = [0.1, 0.01, 0.001]
    
    # Methods to test
    methods = [
        ("Forward Euler", lambda f, y0, t0, tf, h: forward_euler(f, y0, t0, tf, h)),
        ("Backward Euler", lambda f, y0, t0, tf, h: backward_euler(f, y0, t0, tf, h)),
        ("Trapezoidal", lambda f, y0, t0, tf, h: trapezoidal_method(f, y0, t0, tf, h)),
        ("Standard RK4", lambda f, y0, t0, tf, h: rk4(f, y0, t0, tf, h)),
        ("Adaptive RK4", lambda f, y0, t0, tf, h: adaptive_rk4(f, y0, t0, tf, h)[0])
    ]
    
    # Add Rosenbrock method
    methods.append(("Rosenbrock", 
                   lambda f, y0, t0, tf, h: rosenbrock_method(f, y0, t0, tf, h, df_dy, df_dt)))
    
    # Add Implicit RK4 method
    methods.append(("Implicit RK4", 
                   lambda f, y0, t0, tf, h: implicit_rk4(f, y0, t0, tf, h)))
    
    # Results table
    print("\nResults:")
    print("-" * 100)
    header = "{:<15} {:<10} {:<20} {:<15} {:<15} {:<15}".format(
        "Method", "Step Size", "Result", "Time (s)", "Error", "Stable")
    print(header)
    print("-" * 100)
    
    for method_name, method_func in methods:
        for h in step_sizes:
            # Skip combinations that would be unstable for explicit methods
            if method_name in ["Forward Euler", "Standard RK4"] and h * stiffness > 2.0:
                print("{:<15} {:<10.6f} {:<20} {:<15} {:<15} {:<15}".format(
                    method_name, h, "N/A", "N/A", "N/A", "Unstable"))
                continue
            
            try:
                # Measure time
                start_time = time.time()
                result = method_func(f, y0, t0, tf, h)
                end_time = time.time()
                elapsed = end_time - start_time
                
                # Calculate error if analytical solution is available
                if analytical_func:
                    analytical_result = analytical_func(tf)
                    error = abs(result - analytical_result)
                    error_str = "{:.6e}".format(error)
                else:
                    error_str = "N/A"
                
                print("{:<15} {:<10.6f} {:<20.10e} {:<15.6f} {:<15} {:<15}".format(
                    method_name, h, result, elapsed, error_str, "Stable"))
                
            except Exception as e:
                print("{:<15} {:<10.6f} {:<20} {:<15} {:<15} {:<15}".format(
                    method_name, h, "Error", "N/A", "N/A", "Unstable"))
    
    if analytical_func:
        print("\nAnalytical solution at t = {}: {:.10e}".format(tf, analytical_func(tf)))

# Import the standard RK4 method from the previous script
from integrate_rk4 import rk4

if __name__ == "__main__":
    print("Stiff ODE Solvers Module")
    print("=======================")
    
    # Example 1: Linear stiff equation dy/dt = -ky
    def f_stiff(t, y, k=100):
        return -k * y
    
    def df_dy_stiff(t, y, k=100):
        return -k
    
    def df_dt_stiff(t, y, k=100):
        return 0
    
    def analytical_stiff(t, k=100):
        return np.exp(-k * t)
    
    # Benchmark with different stiffness values
    for stiffness in [10, 100, 1000]:
        f = lambda t, y: f_stiff(t, y, stiffness)
        df_dy = lambda t, y: df_dy_stiff(t, y, stiffness)
        df_dt = lambda t, y: df_dt_stiff(t, y, stiffness)
        analytical = lambda t: analytical_stiff(t, stiffness)
        
        benchmark_stiff_equation(
            "dy/dt = -{}y".format(stiffness), 
            f, df_dy, df_dt, analytical,
            stiffness=stiffness
        )
    
    # Example 2: Nonlinear stiff equation (Van der Pol oscillator)
    def van_der_pol(t, y, mu=10):
        """
        Van der Pol oscillator in first-order form
        y is a 2D vector [y0, y1] where:
        dy0/dt = y1
        dy1/dt = mu*(1-y0^2)*y1 - y0
        """
        if isinstance(y, (list, tuple, np.ndarray)):
            y0, y1 = y
            return np.array([y1, mu * (1 - y0**2) * y1 - y0])
        else:
            # For scalar case (simplified for testing)
            return -y
    
    print("\n" + "=" * 80)
    print("Van der Pol Oscillator (Nonlinear Stiff Equation)")
    print("=" * 80)
    print("This equation is more complex and requires vector handling.")
    print("See the code for implementation details.")
    
    print("\nStiff ODE Solvers module loaded successfully!")
